@use "sass:map";

@use "tokens";

@mixin light-mode {
  @media (prefers-color-scheme: light) {
    @content;
  }
}

@mixin transition($property, $duration) {
  transition-property: $property;
  transition-duration: map.get(tokens.$duration, $duration);
}

@mixin pad($size) {
  $padding: map.get(tokens.$padding, $size);

  padding: $padding calc(2 * $padding);
}

@mixin svg-icon {
  width: 24px;
  height: 24px;
  stroke: map.get(tokens.$colors, white);
  stroke-width: 2px;
  fill: none;
}

@mixin svg-button {
  all: unset;

  width: 24px;
  height: 24px;

  display: inline-flex;
  align-items: center;
  justify-content: center;

  background-color: map.get(tokens.$brand, gray);
  padding: 0.25rem;

  // TODO: make better
  &:hover,
  &:focus {
    cursor: pointer;
    outline: 1px solid map.get(tokens.$colors, red);
  }

  & > svg {
    @include svg-icon;
  }
}

///  Responsiveness

// Between a minimum and maximum breakpoint
@mixin between-breakpoints($min, $max) {
  @media (min-width: map.get(tokens.$breakpoints, $min)) and (max-width: (map.get(tokens.$breakpoints, $max) - 1px)) {
    @content;
  }
}

// Apply styling past a specific breakpoint
@mixin from-breakpoint($w) {
  @media (min-width: map.get(tokens.$breakpoints, $w)) {
    @content;
  }
}

// Helper for constructing to-* mixins
@mixin to-breakpoint($w) {
  @media (max-width: (map.get(tokens.$breakpoints, $w) - 1px)) {
    @content;
  }
}
