@use "sass:color";
@use "sass:map";

@use "../sass/tokens";
@use "../sass/mixins";

.labeled-text-input {
  display: grid;
  gap: map.get(tokens.$padding, lg);

  label {
    display: block;
    font-size: map.get(tokens.$font-size, base);
    font-weight: map.get(tokens.$font-weight, md);
    line-height: calc(map.get(tokens.$spacing, xs) * 6);

    color: map.get(tokens.$brand, white);
    @include mixins.light-mode {
      color: map.get(tokens.$grays, dark);
    }
  }

  input {
    display: block;
    width: 100%;
    border-width: 2.5px;
    border-style: solid;
    border-radius: map.get(tokens.$border-radius, base);
    font-size: map.get(tokens.$font-size, base);

    padding: map.get(tokens.$padding, base) map.get(tokens.$padding, lg);

    @include mixins.transition(border-color outline-color outline-width, short);

    color: map.get(tokens.$brand, white);
    border-color: map.get(tokens.$grays, light);
    background-color: map.get(tokens.$grays, light);
    @include mixins.light-mode {
      border-color: map.get(tokens.$grays, very-light);
      color: map.get(tokens.$brand, black);
      background-color: map.get(tokens.$brand, light);
    }
  }

  input.labeled-text-input__input--error {
    border-color: map.get(tokens.$colors, danger);
  }

  input::placeholder {
    opacity: 0.6;
    color: map.get(tokens.$grays, very-light);
    @include mixins.light-mode {
      color: map.get(tokens.$grays, dark);
    }
  }

  input:focus {
    border-color: map.get(tokens.$brand, rich-blue);
  }

  input:disabled {
    opacity: 0.6;
    cursor: not-allowed;

    border-color: map.get(tokens.$grays, light);
    background-color: map.get(tokens.$grays, light);
    @include mixins.light-mode {
      border-color: map.get(tokens.$grays, very-light);
      background-color: map.get(tokens.$grays, very-light);
    }
  }

  .labeled-text-input__error {
    font-size: map.get(tokens.$font-size, base);
    color: map.get(tokens.$colors, danger);
  }

  .labeled-text-input__help {
    font-size: map.get(tokens.$font-size, sm);

    color: map.get(tokens.$brand, white);
    @include mixins.light-mode {
      color: map.get(tokens.$grays, light);
    }
  }
}
